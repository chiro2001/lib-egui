/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package work.chiro.egui;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.awt.GLData;
import work.chiro.egui.gears.GLXGears;

import javax.swing.*;
import java.awt.*;
import java.util.concurrent.atomic.AtomicInteger;

public class App {
    private final JFrame frame;
    private final LibEgui lib;
    private final Pointer ui;
    EguiGL egui;
    MyGLCanvas canvas;
    boolean terminated = false;
    LibEgui.PainterBeforeHandler before;
    LibEgui.PainterMeshHandler handler;
    LibEgui.VoidHandler after;
    GLXGears gears;
    int frameCount = 0;
    int meshCount = 0;
    double startTime;
    double fpsNow = 0;
    double mpsNow = 0;

    public void doTerminate() throws InterruptedException {
        if (terminated) return;
        terminated = true;
        System.out.println("doTerminate done");
        System.out.println("main acquiring terminated");
        lib.egui_quit(ui);
        System.out.println("main: dispose canvas");
        GL.setCapabilities(null);
        canvas.disposeCanvas();
        System.out.println("main: dispose canvas done");
        System.out.println("all done");
        System.out.println("main: disposing frame");
        frame.dispose();
        System.out.println("main: disposed frame");
        System.out.println("run done");
        Thread.currentThread().interrupt();
    }

    public App() {
        frame = new JFrame("egui OpenGL Test") {
            @Override
            public void dispose() {
                try {
                    doTerminate();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                super.dispose();
            }
        };
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setPreferredSize(new Dimension(600, 600));
        GLData data = new GLData();
        data.samples = 4;
        data.swapInterval = 0;
        String pwd = System.getProperty("user.dir");
        lib = Native.load(String.format("%s/../target/debug/libegui.so", pwd), LibEgui.class);
        egui = new EguiGL();
        canvas = new MyGLCanvas(data, egui::init);
        AtomicInteger count = new AtomicInteger();
        JLabel label = new JLabel("counting");
        before = () -> {
            count.getAndIncrement();
            String text = String.format("fps: %.1f; mps: %.1f, frame: %d", fpsNow, mpsNow, count.get());
            // System.out.println(text);
            label.setText(text);
            if (!canvas.isValid()) {
                GL.setCapabilities(null);
                return false;
            }
            canvas.beforeRender();
            if (!canvas.getInitCalled()) {
                canvas.initGL();
                startTime = System.currentTimeMillis();
                gears = new GLXGears();
                gears.setSize(canvas.getWidth(), canvas.getHeight());
                canvas.setInitCalled();
            }
            gears.render();
            gears.animate();
            // canvas.swapBuffers();
            double time = System.currentTimeMillis();
            frameCount++;
            if (time >= startTime + 1000) {
                fpsNow = frameCount * 1000 / (time - startTime);
                mpsNow = meshCount * 1000 / (time - startTime);
                startTime = time;
                frameCount = 0;
                meshCount = 0;
            }
            // canvas.afterRender();
            // return false;
            boolean r = egui.beforeHandler.callback();
            if (!r) canvas.afterRender();
            return r;
        };
        handler = (minX, minY, maxX, maxY, indices, indicesLen, vertices, verticesLen, textureManaged, textureId) -> {
            egui.meshHandler.callback(minX, minY, maxX, maxY, indices, indicesLen, vertices, verticesLen, textureManaged, textureId);
            meshCount++;
        };
        after = () -> {
            egui.afterHandler.callback();
            // gears.render();
            // gears.animate();
            canvas.swapBuffers();
            canvas.afterRender();
        };
        ui = lib.egui_create(before, handler, after);
        frame.add(canvas, BorderLayout.CENTER);
        frame.add(label, BorderLayout.SOUTH);
        frame.pack();
        frame.setVisible(true);
        frame.transferFocus();
    }

    public void run() {
        lib.egui_run_block(ui);
    }

    public static void main(String[] args) {
        App app = new App();
        app.run();
        System.out.println("exit");
    }
}
