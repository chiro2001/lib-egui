/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package work.chiro.egui;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.awt.GLData;

import javax.swing.*;
import java.awt.*;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

import static org.lwjgl.opengl.GL11.*;

public class App {
    private final JFrame frame;
    private LibEgui lib;
    private Pointer ui;
    EguiGL egui;
    static MyGLCanvas canvas = null;
    static Thread thread = null;

    boolean terminated = false;
    public void doTerminate() throws InterruptedException {
        if (terminated) return;
        terminated = true;
        System.out.println("doTerminate done");
        System.out.println("main acquiring terminated");
        // signalTerminated.acquire();
        lib.egui_quit(ui);
        // Thread.sleep(1000);
        thread.join();
        System.out.println("main: dispose canvas");
        GL.setCapabilities(null);
        // canvas.disposeCanvas();
        System.out.println("main: dispose canvas done");
        System.out.println("all done");
        // doTerminate();
        // thread.interrupt();
        // canvas.disposeCanvas();
        // System.out.println("remove canvas");
        // // canvas.doDisposeCanvas();
        // frame.remove(canvas);
        // canvas = null;
        // System.out.println("remove canvas done");
        System.out.println("main: disposing frame");
        frame.dispose();
        System.out.println("main: disposed frame");
        // lib.egui_quit(ui);
        // System.exit(0);
        System.out.println("run done");
        Thread.currentThread().interrupt();
    }

    public App() {
        frame = new JFrame("egui OpenGL Test") {
            @Override
            public void dispose() {
                try {
                    doTerminate();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
                super.dispose();
            }
        };
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setPreferredSize(new Dimension(600, 600));
        GLData data = new GLData();
        data.samples = 4;
        data.swapInterval = 0;
        String pwd = System.getProperty("user.dir");
        lib = Native.load(String.format("%s/../target/debug/libegui.so", pwd), LibEgui.class);
        egui = new EguiGL();
        canvas = new MyGLCanvas(data, egui::init);
        AtomicInteger count = new AtomicInteger();
        JLabel label = new JLabel("counting");
        ui = lib.egui_create(() -> {
            count.getAndIncrement();
            String text = String.format("frame: %d", count.get());
            label.setText(text);

            if (canvas == null) return false;
            if (!canvas.isValid()) {
                GL.setCapabilities(null);
                return false;
            }
            canvas.beforeRender();
            if (!canvas.getInitCalled()) {
                canvas.initGL();
                canvas.setInitCalled();
            }
            return egui.beforeHandler.callback();
        }, (minX, minY, maxX, maxY, indices, indicesLen, vertices, verticesLen, textureManaged, textureId) -> {
            egui.meshHandler.callback(minX, minY, maxX, maxY, indices, indicesLen, vertices, verticesLen, textureManaged, textureId);
            // canvas.swapBuffers();
        }, () -> {
            egui.afterHandler.callback();
            if (canvas != null) {
                canvas.swapBuffers();
                canvas.afterRender();
            }
        });
        frame.add(canvas, BorderLayout.CENTER);
        frame.add(label, BorderLayout.SOUTH);
        frame.pack();
        frame.setVisible(true);
        frame.transferFocus();
    }

    public void run() throws InterruptedException {
        thread = new Thread(() -> {
            lib.egui_run_block(ui);
            System.out.println("egui_run_block done");
        });
        thread.setDaemon(true);
        thread.start();
        egui.setQuitListener(() -> {
            System.out.println("quit listener: dispose canvas");
            GL.setCapabilities(null);
            canvas.afterRender();
            canvas.doDisposeCanvas();
            canvas = null;
        });

        // Thread.sleep(10000);
        // doTerminate();
    }

    public static void main(String[] args) {
        App app = new App();
        try {
            app.run();
        } catch (InterruptedException ignored) {
            System.out.println("exit");
        }
    }
}
