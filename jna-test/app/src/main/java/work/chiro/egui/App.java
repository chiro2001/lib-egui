/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package work.chiro.egui;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.awt.AWTGLCanvas;
import org.lwjgl.opengl.awt.GLData;

import javax.swing.*;
import java.awt.*;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import static org.lwjgl.opengl.GL.createCapabilities;
import static org.lwjgl.opengl.GL11.*;

class MyGLCanvas extends AWTGLCanvas {
    private boolean enabled = false;

    protected MyGLCanvas(GLData data) {
        super(data);
    }

    @Override
    public void initGL() {
        System.out.println("OpenGL version: " + effective.majorVersion + "." + effective.minorVersion + " (Profile: " + effective.profile + ")");
        createCapabilities();
        glClearColor(0.3f, 0.4f, 0.5f, 1);
        enabled = true;
    }

    @Override
    public void paintGL() {

    }

    @Override
    public void beforeRender() {
        super.beforeRender();
    }

    @Override
    public void afterRender() {
        super.afterRender();
    }

    boolean getInitCalled() {
        return initCalled;
    }

    void setInitCalled(boolean value) {
        initCalled = value;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @Override
    public void disposeCanvas() {
        enabled = false;
        super.disposeCanvas();
    }
}

public class App {
    static Semaphore signalTerminate = new Semaphore(0);
    static Semaphore signalTerminated = new Semaphore(0);
    private final JFrame frame;
    private final LibEGui.PainterHandler renderHandler;
    private final LibEGui lib;
    private final Pointer ui;

    public static void doTerminate() {
        // request the cleanup
        signalTerminate.release();
        try {
            // wait until the thread is done with the cleanup
            boolean _i = signalTerminated.tryAcquire(2, TimeUnit.SECONDS);
            // signalTerminated.acquire();
        } catch (InterruptedException ignored) {
        }
    }

    public App() {
        frame = new JFrame("AWT test") {
            @Override
            public void dispose() {
                doTerminate();
                super.dispose();
            }
        };
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setPreferredSize(new Dimension(600, 600));
        GLData data = new GLData();
        MyGLCanvas canvas = new MyGLCanvas(data);
        frame.add(canvas, BorderLayout.CENTER);
        frame.pack();
        frame.setVisible(true);
        frame.transferFocus();
        renderHandler = (minX, minY, maxX, maxY, indices, indicesLen, vertices, verticesLen, textureManaged, textureId) -> {
            if (!canvas.isEnabled()) return;
            System.out.println("renderHandler!");
            if (!canvas.isValid()) {
                GL.setCapabilities(null);
                return;
            }
            // canvas.render();

            canvas.beforeRender();
            try {
                if (!canvas.getInitCalled()) {
                    canvas.initGL();
                    canvas.setInitCalled(true);
                }
                int w = canvas.getWidth();
                int h = canvas.getHeight();
                float aspect = (float) w / h;
                double now = System.currentTimeMillis() * 0.001;
                float width = (float) Math.abs(Math.sin(now * 0.3));
                glClear(GL_COLOR_BUFFER_BIT);
                glViewport(0, 0, w, h);
                glBegin(GL_QUADS);
                glColor3f(0.4f, 0.6f, 0.8f);
                glVertex2f(-0.75f * width / aspect, 0.0f);
                glVertex2f(0, -0.75f);
                glVertex2f(+0.75f * width / aspect, 0);
                glVertex2f(0, +0.75f);
                glEnd();
                canvas.swapBuffers();
            } finally {
                canvas.afterRender();
            }

            try {
                if (signalTerminate.tryAcquire(10, TimeUnit.MILLISECONDS)) {
                    System.out.println("interrupted");
                    GL.setCapabilities(null);
                    signalTerminated.release();
                    canvas.disposeCanvas();
                }
            } catch (InterruptedException ignored) {
            }
        };
        String pwd = System.getProperty("user.dir");
        lib = Native.load(String.format("%s/../target/debug/libegui.so", pwd), LibEGui.class);
        ui = lib.egui_create(renderHandler);
        lib.egui_run(ui);
    }

    public void run() throws InterruptedException {
        Thread.sleep(3000);
        // t.interrupt();
        Thread.sleep(500);
        System.out.println("all done");
        frame.dispose();
    }

    public static void main(String[] args) throws InterruptedException {
        App app = new App();
        app.run();
    }
}
