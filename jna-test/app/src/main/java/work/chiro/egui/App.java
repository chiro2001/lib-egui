/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package work.chiro.egui;

import com.sun.jna.Native;
import com.sun.jna.Pointer;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.awt.GLData;

import javax.swing.*;
import java.awt.*;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import static org.lwjgl.opengl.GL11.*;

public class App {
    static Semaphore signalTerminate = new Semaphore(0);
    static Semaphore signalTerminated = new Semaphore(0);
    private final JFrame frame;
    private final LibEGui lib;
    private final Pointer ui;
    private Runnable testHandler;

    public static void doTerminate() {
        // request the cleanup
        signalTerminate.release();
        try {
            // wait until the thread is done with the cleanup
            boolean _i = signalTerminated.tryAcquire(300, TimeUnit.MILLISECONDS);
            // signalTerminated.acquire();
        } catch (InterruptedException ignored) {
        }
    }

    public App() {
        frame = new JFrame("AWT test") {
            @Override
            public void dispose() {
                doTerminate();
                super.dispose();
            }
        };
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        frame.setPreferredSize(new Dimension(600, 600));
        GLData data = new GLData();
        MyGLCanvas canvas = new MyGLCanvas(data);
        frame.add(canvas, BorderLayout.CENTER);
        frame.pack();
        frame.setVisible(true);
        frame.transferFocus();
        LibEGui.PainterHandler renderHandler = (minX, minY, maxX, maxY, indices, indicesLen, vertices, verticesLen, textureManaged, textureId) -> {
            if (!canvas.isEnabled() && canvas.getInitCalled()) {
                System.out.println("canvas disabled!");
                return;
            }
            if (!canvas.isValid()) {
                GL.setCapabilities(null);
                return;
            }
            canvas.beforeRender();
            try {
                if (!canvas.getInitCalled()) {
                    canvas.initGL();
                    canvas.setInitCalled(true);
                }
                int w = canvas.getWidth();
                int h = canvas.getHeight();

                // float aspect = (float) w / h;
                // double now = System.currentTimeMillis() * 0.001;
                // float width = (float) Math.abs(Math.sin(now * 0.3));
                // glClear(GL_COLOR_BUFFER_BIT);
                // glViewport(0, 0, w, h);
                // glBegin(GL_QUADS);
                // glColor3f(0.4f, 0.6f, 0.8f);
                // glVertex2f(-0.75f * width / aspect, 0.0f);
                // glVertex2f(0, -0.75f);
                // glVertex2f(+0.75f * width / aspect, 0);
                // glVertex2f(0, +0.75f);
                // glEnd();

                glClear(GL_COLOR_BUFFER_BIT);
                glViewport(0, 0, w, h);
                glBegin(GL_TRIANGLES);
                glColor3f(0.4f, 0.6f, 0.8f);
                // System.out.println("verticesLen = " + verticesLen);
                Pointer p = vertices;
                for (int i = 0; i < verticesLen; i++) {
                    Vertex v = Vertex.fromPointer(p);
                    System.out.printf("vex: pos=%s, uv=%s, color=%08x\n", v.pos, v.uv, v.color);
                    // System.out.println("v.pos = " + v.pos);
                    glVertex2f(v.pos.x, v.pos.y);
                    // System.out.println("v.uv = " + v.uv);
                    // System.out.printf("v.color = %08x\n", v.color);
                    glColor4b((byte) (v.color & 0xff), (byte) ((v.color >> 8) & 0xff), (byte) ((v.color >> 16) & 0xff), (byte) ((v.color >> 24) & 0xff));
                    // System.out.println("update pointer");
                    // p = p.getPointer(Vertex.bytesLength());
                    p = Pointer.createConstant(Pointer.nativeValue(p) + Vertex.bytesLength());
                    // System.out.println("update pointer done");
                }
                glEnd();

                canvas.swapBuffers();
            } catch (Throwable e) {
                System.out.printf("paint error: %s\n", e);
            } finally {
                canvas.afterRender();
            }

            try {
                if (signalTerminate.tryAcquire(10, TimeUnit.MILLISECONDS)) {
                    System.out.println("interrupted");
                    GL.setCapabilities(null);
                    signalTerminated.release();
                    canvas.disposeCanvas();
                }
            } catch (InterruptedException ignored) {
                System.out.println("InterruptedException");
            }
        };
        String pwd = System.getProperty("user.dir");
        lib = Native.load(String.format("%s/../target/debug/libegui.so", pwd), LibEGui.class);
        ui = lib.egui_create(renderHandler);
        // lib.egui_run(ui);
        Thread thread = new Thread(() -> lib.egui_run_block(ui));
        thread.setDaemon(true);
        thread.start();
    }

    public void run() throws InterruptedException {
        Thread.sleep(3000);
        System.out.println("all done");
        frame.dispose();
    }

    public static void main(String[] args) throws InterruptedException {
        App app = new App();
        app.run();
    }
}
